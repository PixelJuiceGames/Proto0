#pragma once

#include <Graphics/Interfaces/IGraphics.h>
#include <ShaderGlobals.h>

// ========================================================================= //
// Descriptor Sets                                                           //
// ========================================================================= //

// TODO: These should be autogenerated with some codegen solution
// from the shader (source of bytecode reflections) 
// UberShader Descriptor Sets
struct SRT_UberShaderData
{
	struct Persistent
	{
		const ::Descriptor gLinearRepeatSampler =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gLinearRepeatSampler", ROOT_PARAM_Persistent_SAMPLER,
#endif
			::DESCRIPTOR_TYPE_SAMPLER, 1, 0
		};
	}*pPersistent;

	static const ::Descriptor* PersistentPtr()
	{
		if (!sizeof(Persistent))
		{
			return 0;
		}

		static Persistent layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}

	struct PerFrame
	{
		const ::Descriptor CB0 =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"CB0", ROOT_PARAM_PerFrame,
#endif
			::DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, 0
		};
	}*pPerFrame;

	static const ::Descriptor* PerFramePtr()
	{
		if (!sizeof(PerFrame))
		{
			return 0;
		}

		static PerFrame layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}
};

// TODO: These should be autogenerated with some codegen solution
// from the shader (source of bytecode reflections) 
// Tone Mapping Descriptor Sets
struct SRT_ToneMappingData
{
	struct Persistent
	{
		const ::Descriptor gLinearClampSampler =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gLinearClampSampler", ROOT_PARAM_Persistent_SAMPLER,
#endif
			::DESCRIPTOR_TYPE_SAMPLER, 1, 0
		};
	}*pPersistent;

	static const ::Descriptor* PersistentPtr()
	{
		if (!sizeof(Persistent))
		{
			return 0;
		}

		static Persistent layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}

	struct PerFrame
	{
		const ::Descriptor gSceneColor =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gSceneColor", ROOT_PARAM_PerFrame,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 0
		};
		const ::Descriptor gTonyMcMapfaceLut =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gTonyMcMapfaceLut", ROOT_PARAM_PerFrame,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 1
		};
		const ::Descriptor gBloomBuffer =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gBloomBuffer", ROOT_PARAM_PerFrame,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 2
		};
	}*pPerFrame;

	static const ::Descriptor* PerFramePtr()
	{
		if (!sizeof(PerFrame))
		{
			return 0;
		}

		static PerFrame layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}
};

// TODO: These should be autogenerated with some codegen solution
// from the shader (source of bytecode reflections) 
// Downsample Descriptor Sets
struct SRT_DownsampleData
{
	struct Persistent
	{
		const ::Descriptor gLinearClampSampler =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gLinearClampSampler", ROOT_PARAM_Persistent_SAMPLER,
#endif
			::DESCRIPTOR_TYPE_SAMPLER, 1, 0
		};
	}*pPersistent;

	static const ::Descriptor* PersistentPtr()
	{
		if (!sizeof(Persistent))
		{
			return 0;
		}

		static Persistent layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}

	struct PerDraw
	{
		const ::Descriptor CB0 =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"CB0", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, 0
		};
		const ::Descriptor gSourceTexture =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gSourceTexture", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 1
		};
		const ::Descriptor gDestinationTexture =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gDestinationTexture", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_RW_TEXTURE, 1, 2
		};
	}*pPerDraw;

	static const ::Descriptor* PerDrawPtr()
	{
		if (!sizeof(PerDraw))
		{
			return 0;
		}

		static PerDraw layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}
};

// TODO: These should be autogenerated with some codegen solution
// from the shader (source of bytecode reflections) 
// Upsample Descriptor Sets
struct SRT_UpsampleData
{
	struct Persistent
	{
		const ::Descriptor gLinearClampSampler =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gLinearClampSampler", ROOT_PARAM_Persistent_SAMPLER,
#endif
			::DESCRIPTOR_TYPE_SAMPLER, 1, 0
		};
	}*pPersistent;

	static const ::Descriptor* PersistentPtr()
	{
		if (!sizeof(Persistent))
		{
			return 0;
		}

		static Persistent layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}

	struct PerDraw
	{
		const ::Descriptor CB0 =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"CB0", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1, 0
		};
		const ::Descriptor gSourceTexture =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gSourceTexture", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 1
		};
		const ::Descriptor gPreviousTexture =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gPreviousTexture", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_TEXTURE, 1, 2
		};
		const ::Descriptor gDestinationTexture =
		{
#if defined IF_VALIDATE_DESCRIPTOR
			"gDestinationTexture", ROOT_PARAM_PerDraw,
#endif
			::DESCRIPTOR_TYPE_RW_TEXTURE, 1, 3
		};
	}*pPerDraw;

	static const ::Descriptor* PerDrawPtr()
	{
		if (!sizeof(PerDraw))
		{
			return 0;
		}

		static PerDraw layout = {};
		::Descriptor* desc = (::Descriptor*)((uint64_t)&layout);
		return &desc[0];
	}
};
